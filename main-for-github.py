import g4f
import requests
import time
import json
import base64
import mysql.connector
from g4f.client import AsyncClient
import logging
import asyncio
from datetime import date, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InlineQueryResultArticle, InputTextMessageContent
from telegram.ext import (
    ApplicationBuilder,
    CallbackContext,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    InlineQueryHandler,
    filters,
    CallbackQueryHandler,
)
from telegram.constants import ChatAction
from uuid import uuid4

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)

TOKEN = "" # –¢–æ–∫–µ–Ω —Ç–µ–ª–µ–≥—Ä–∞–º–º –±–æ—Ç–∞

gemini_api_key = "" # API –∫–ª—é—á –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Gemini

active_requests = {} # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤

# –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
MODELS = {
    "gemini-1.5-flash": {
        "name": "Gemini 1.5 Flash",
        "desc": "–í—ã—Å–æ–∫–æ–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –Ω–µ–π—Ä–æ—Å–µ—Ç—å —Å —Å–∞–º—ã–º –±—ã—Å—Ç—Ä—ã–º –æ—Ç–≤–µ—Ç–æ–º",
        "limit_of_day": 1500,
        "max_context_tokens": 8192,
    },
    "gemini-1.5-pro": {
        "name": "Gemini 1.5 Pro",
        "desc": "–í—ã—Å–æ–∫–æ–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –Ω–µ–π—Ä–æ—Å–µ—Ç—å –¥–ª—è –ª—É—á—à–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤",
        "limit_of_day": 50,
        "max_context_tokens": 8192,
    },
    "gemini-pro": {
        "name": "Gemini 1.0 Pro",
        "desc": "–í—ã—Å–æ–∫–æ–∫–ª–∞—Å—Å–Ω–∞—è –Ω–µ–π—Ä–æ—Å–µ—Ç—å —Å —É–º–µ—Ä–µ–Ω–Ω–æ–π –±—ã—Å—Ç—Ä–æ—Ç–æ–π –∏ —Ö–æ—Ä–æ—à–∏–º–∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—è–º–∏",
        "limit_of_day": "–ù–µ—Ç",
        "max_context_tokens": 8192,
    },
    "claude-sonnet-3.5": {
        "name": "Claude Sonnet 3.5",
        "desc": "–í—ã—Å–æ–∫–æ–∫–ª–∞—Å—Å–Ω–∞—è –Ω–µ–π—Ä–æ—Å–µ—Ç—å —Å —É–º–µ—Ä–µ–Ω–Ω–æ–π –±—ã—Å—Ç—Ä–æ—Ç–æ–π –∏ —Ö–æ—Ä–æ—à–∏–º–∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—è–º–∏",
        "limit_of_day": "–ù–µ—Ç",
        "max_context_tokens": 8192,
    },
    "gpt-4o": {
        "name": "GPT 4o",
        "desc": "–í—ã—Å–æ–∫–æ–∫–ª–∞—Å—Å–Ω–∞—è –Ω–µ–π—Ä–æ—Å–µ—Ç—å —Å —É–º–µ—Ä–µ–Ω–Ω–æ–π –±—ã—Å—Ç—Ä–æ—Ç–æ–π –∏ —Ö–æ—Ä–æ—à–∏–º–∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—è–º–∏",
        "limit_of_day": "–ù–µ—Ç",
        "max_context_tokens": 8192,
    },
    "gpt-4o-mini": {
        "name": "GPT 4o mini",
        "desc": "–ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–µ, –Ω–æ –º–µ–Ω–µ–µ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–µ —Ä–µ—à–µ–Ω–∏–µ —á–µ–º GPT-4o",
        "limit_of_day": "–ù–µ—Ç",
        "max_context_tokens": 8192,
    },
}

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db_config = {
    "host": "",
    "user": "",
    "password": "",
    "database": "",
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def get_db_connection():
    return mysql.connector.connect(**db_config)

def limit_context_of_model(model):
    for model_key, model_data in MODELS.items():
        if model_key == model:
            return model_data['max_context_tokens']
        
def limit_of_day_of_model(model):
    for model_key, model_data in MODELS.items():
        if model_key == model:
            return model_data['limit_of_day']

def format_text(model, type, response, all_time, tokens_used=None, limit_of_user_model=None):
    if not tokens_used == None:
        tokens_text = f'*üìÇ | –ó–∞–Ω—è—Ç–æ {tokens_used} –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –æ–∫–Ω–∞ –∏–∑ {limit_of_user_model}*\n'
    else: tokens_text = ''
    text = (
        f"*üí¨ | –û—Ç–≤–µ—Ç –æ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ {model}:*\n\n"
        f"{response}\n\n"
        f"*üìå | –¢–∏–ø –∑–∞–ø—Ä–æ—Å–∞: {type}*\n"
        f"*üïë | {all_time:.2f} —Å–µ–∫—É–Ω–¥*\n"
        f"{tokens_text}"
        f"*üîª | –î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start*"
    )
    return text

def format_image(model, all_time):
    text = (
        f"*üí¨ | –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é {model}*\n"
        f"*üìå | –¢–∏–ø –∑–∞–ø—Ä–æ—Å–∞: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (/img)*\n"
        f"*üïë | {all_time:.2f} —Å–µ–∫—É–Ω–¥*\n"
        f"*üîª | –î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start*"
    )
    return text

def get_user_model_text(user_id):
    conn = get_db_connection()
    cursor = conn.cursor()
    try:
        cursor.execute("SELECT model_text FROM users WHERE user_id = %s", (user_id,))
        result = cursor.fetchone()
        return result[0] if result else None
    finally:
        cursor.close()
        conn.close()


def get_user_model_vision(user_id):
    conn = get_db_connection()
    cursor = conn.cursor()
    try:
        cursor.execute("SELECT model_vision FROM users WHERE user_id = %s", (user_id,))
        result = cursor.fetchone()
        return result[0] if result else None
    finally:
        cursor.close()
        conn.close()


def get_user_model_image(user_id):
    conn = get_db_connection()
    cursor = conn.cursor()
    try:
        cursor.execute("SELECT model_image FROM users WHERE user_id = %s", (user_id,))
        result = cursor.fetchone()
        return result[0] if result else None
    finally:
        cursor.close()
        conn.close()


def save_message(user_id, message, is_user_message):
    if user_id:
        ensure_user_exists(user_id)
    conn = get_db_connection()
    cursor = conn.cursor()
    query = "INSERT INTO chats (user_id, message, is_user_message) VALUES (%s, %s, %s)"
    cursor.execute(query, (user_id, message, is_user_message))
    conn.commit()
    cursor.close()
    conn.close()


def delete_messages(user_id):
    if user_id:
        ensure_user_exists(user_id)
    logging.info(f"–ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è user_id: {user_id}")
    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        query = "DELETE FROM chats WHERE user_id = %s"
        cursor.execute(query, (user_id,))
        conn.commit()
        logging.info("–°–æ–æ–±—â–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã")
        cursor.close()
        conn.close()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {str(e)}")


def get_chat_history(user_id, limit):
    if user_id:
        ensure_user_exists(user_id)
    conn = get_db_connection()
    cursor = conn.cursor(dictionary=True)
    query = "SELECT message, is_user_message FROM chats WHERE user_id = %s ORDER BY timestamp DESC"
    cursor.execute(query, (user_id,))
    history = cursor.fetchall()
    cursor.close()
    conn.close()
    
    history = history[::-1]
    
    total_chars = sum(len(entry['message']) for entry in history)
    
    while total_chars > limit and history:
        removed_message = history.pop(0)
        total_chars -= len(removed_message['message'])

    return history, total_chars

def get_usage_limit_model(network_name):
    if network_name.find('gemini-1.5'):
        return 1000
    reset_value = limit_of_day_of_model(network_name)
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT usage_count, last_used FROM neural_network_limits WHERE network_name = %s", (network_name,))
    result = cursor.fetchone()
    
    if result:
        usage_count, last_used = result
        if date.today() - last_used > timedelta(days=1):
            cursor.execute("UPDATE neural_network_limits SET usage_count = %s, last_used = %s WHERE network_name = %s", (reset_value, date.today(), network_name))
            conn.commit()
            return reset_value
        else:
            return usage_count
    else:
        cursor.execute("INSERT INTO neural_network_limits (network_name, usage_count, last_used) VALUES (%s, %s, %s)", (network_name, reset_value, date.today()))
        conn.commit()
        return reset_value
    
def decrease_usage(network_name):
    if network_name.find('gemini-1.5'):
        return
    mydb = get_db_connection()
    cursor = mydb.cursor()
    cursor.execute("UPDATE neural_network_limits SET usage_count = usage_count - 1 WHERE network_name = %s", (network_name,))
    mydb.commit()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.callback_query:
        query = update.callback_query
        user_id = query.from_user.id
        await query.answer()
    else:
        user_id = update.effective_user.id
    if user_id:
        ensure_user_exists(user_id)
    reply_markup = InlineKeyboardMarkup(
        [
            [InlineKeyboardButton("üîó | –°–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å", callback_data="models")],
            [InlineKeyboardButton("üõ† | –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã", callback_data="tools")],
            [
                InlineKeyboardButton(
                    "‚ùå | –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ–∫—É—â–∏–π —á–∞—Ç", callback_data="end_chat"
                )
            ],
        ]
    )
    text = (
        f"*üë§ | –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{update.effective_user.username}:*\n"
        f"*üìù | –ú–æ–¥–µ–ª—å –¥–ª—è —Ç–µ–∫—Å—Ç–∞: {get_user_model_text(user_id)}*\n"
        f"*üëÄ | –ú–æ–¥–µ–ª—å —Ä–∞—Å–ø–æ–∑–Ω–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {get_user_model_vision(user_id)}*\n"
        f"*üñº | –ú–æ–¥–µ–ª—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {get_user_model_image(user_id)}*\n\n"
        f"*‚ô¶Ô∏è | –î–Ω–µ–≤–Ω—ã–µ –ª–∏–º–∏—Ç—ã –Ω–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:*\n"
        f"*Gemini 1.5 Pro: {get_usage_limit_model('gemini-1.5-pro')}/{limit_of_day_of_model('gemini-1.5-pro')}*\n"
        f"*Gemini 1.5 Flash: {get_usage_limit_model('gemini-1.5-flash')}/{limit_of_day_of_model('gemini-1.5-flash')}*"
    )
    if not update.callback_query:
        await update.message.reply_text(
            text, reply_markup=reply_markup, parse_mode="Markdown"
        )
    else:
        await query.edit_message_text(
            text, reply_markup=reply_markup, parse_mode="Markdown"
        )


async def exam(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    active_requests[user_id] = "exam"
    await update.message.reply_text(
        "–û–∂–∏–¥–∞—é –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–µ—Å—Ç–∞. –í–≤–µ–¥–∏—Ç–µ /cancel, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å."
    )

async def img(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    active_requests[user_id] = "img"
    await update.message.reply_text(
        "–û–∂–∏–¥–∞—é –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ–º—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –í–≤–µ–¥–∏—Ç–µ /cancel, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å."
    )


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id in active_requests:
        del active_requests[user_id]
        await update.message.reply_text("–ó–∞–ø—Ä–æ—Å –æ—Ç–º–µ–Ω—ë–Ω.")
    else:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤.")


async def choose_model_handler(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()  # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback

    user_id = query.from_user.id  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ CallbackQuery

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –º–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT model_text FROM users WHERE user_id = %s", (user_id,))
    user_data = cursor.fetchone()
    current_model = user_data[0] if user_data else None
    cursor.close()
    conn.close()

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –≤—ã–±–æ—Ä–æ–º –º–æ–¥–µ–ª–µ–π
    keyboard = []
    for model_key in MODELS.keys():
        # –ï—Å–ª–∏ —ç—Ç–æ –≤—ã–±—Ä–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å, –¥–æ–±–∞–≤–ª—è–µ–º –≥–∞–ª–æ—á–∫—É
        button_text = f"‚úÖ | {model_key}" if model_key == current_model else model_key
        keyboard.append(
            [InlineKeyboardButton(button_text, callback_data=f"model_{model_key}")]
        )

    keyboard.append(
        [InlineKeyboardButton("üîª | –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data=f"menu")]
    )

    models_info = []
    for model_key, model_data in MODELS.items():
        model_string = (
            f"*{model_data['name']}:* {model_data['desc']}\n"
            f"–î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã –æ—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {model_data['limit_of_day']}\n"
            f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç: {model_data['max_context_tokens']}\n\n"
        )
        models_info.append(model_string)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏, –≤—ã–∑–≤–∞–≤—à–µ–º CallbackQuery
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        text="üìå –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:\n" + "".join(models_info),
        reply_markup=reply_markup,
        parse_mode="Markdown",
    )


async def set_model(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    model = query.data.split("_")[1]  # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute(
        "UPDATE users SET model_text = %s WHERE user_id = %s", (model, user_id)
    )
    conn.commit()
    cursor.close()
    conn.close()

    # –°–æ–∑–¥–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    keyboard = []
    for model_key in MODELS.keys():
        # –ï—Å–ª–∏ —ç—Ç–æ –≤—ã–±—Ä–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å, –¥–æ–±–∞–≤–ª—è–µ–º –≥–∞–ª–æ—á–∫—É
        button_text = f"‚úÖ | {model_key}" if model_key == model else model_key
        keyboard.append(
            [InlineKeyboardButton(button_text, callback_data=f"model_{model_key}")]
        )

    keyboard.append(
        [InlineKeyboardButton("üîª | –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data=f"menu")]
    )

    models_info = []
    for model_key, model_data in MODELS.items():
        model_string = (
            f"*{model_data['name']}:* {model_data['desc']}\n"
            f"–î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã –æ—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {model_data['limit_of_day']}\n"
            f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç: {model_data['max_context_tokens']}\n\n"
        )
        models_info.append(model_string)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        "üìå –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:\n" + "".join(models_info),
        reply_markup=reply_markup,
        parse_mode="Markdown",
    )


async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id

    if user_id in active_requests:
        if active_requests[user_id] == 'img':
            await handle_img_gen(update, context)
            return
        else:
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–æ–∫–∞ —è –æ–±—Ä–∞–±–æ—Ç–∞—é –≤–∞—à –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∑–∞–ø—Ä–æ—Å (handle_text)."
            )
            return

    if int(get_usage_limit_model(get_user_model_text(user_id))) < 1:
        await update.message.reply_text(
            f"–¢–µ–∫—É—â–∏–π –≥–ª–æ–±–∞–ª—å–Ω—ã–π –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ {get_user_model_text(user_id)} –∏—Å—á–µ—Ä–ø–∞–Ω!"
        )
        return

    active_requests[user_id] = "text"

    user_input = update.message.text
    save_message(user_id, user_input, True)

    processing_message = await update.message.reply_text(
        "_–í–∞—à –∑–∞–ø—Ä–æ—Å (Text) –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è..._", parse_mode="Markdown"
    )

    await context.bot.send_chat_action(chat_id=chat_id, action=ChatAction.TYPING)

    response_text, response_no_format = await process_text(user_input, user_id)

    await context.bot.delete_message(
        chat_id=chat_id, message_id=processing_message.message_id
    )

    if response_text and response_text.find("–ü—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!"):
        reply_markup = InlineKeyboardMarkup(
            [[InlineKeyboardButton("‚ùå | –ó–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç", callback_data="end_chat")]]
        )
        await update.message.reply_text(
            response_text, parse_mode="Markdown", reply_markup=reply_markup
        )
        save_message(user_id, response_no_format, False)
    else:
        await update.message.reply_text(response_text, parse_mode="Markdown")

    del active_requests[user_id]

async def handle_inline_query(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.inline_query
    
    try:
        if not query:
            return
        
        response_text = (
            '- @'
            + query.from_user.username
            + ': "'
            + query.query
            + '"\n\n- –ò–ò: "'
            + await process_text_inline_mode(query.query, query.from_user.id)
            + '"'
        )

        results = [
            InlineQueryResultArticle(
                id=str(uuid4()),
                title="–†–µ–∑—É–ª—å—Ç–∞—Ç",
                description=str(response_text),
                input_message_content=InputTextMessageContent(message_text=str(response_text))
            )
        ]

        await update.inline_query.answer(results)

    except asyncio.TimeoutError:
        await context.bot.answer_inline_query(
            inline_query_id=query.id,
            results=[],
            cache_time=0
        )
    except Exception as e:
        logging.error(f"Inline query error: {e}")
        await context.bot.answer_inline_query(
            inline_query_id=query.id,
            results=[],
            cache_time=0
        )


async def process_text(user_input: str, user_id: int) -> str:
    type_request = "–¢–µ–∫—Å—Ç–æ–≤—ã–π"
    try:
        start_time = time.time()
        client = AsyncClient()

        user_model = get_user_model_text(user_id)
        limit_of_user_model = limit_context_of_model(user_model)

        chat_history, tokens_used = get_chat_history(user_id, limit_of_user_model)
        messages = [
            {
                "role": "system",
                "content": "–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—â–∏–π –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏ –ª–∞–∫–æ–Ω–∏—á–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã.\n"
                + "1. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —É–∫–∞–∑—ã–≤–∞–µ—Ç –¥–ª–∏–Ω—É –æ—Ç–≤–µ—Ç–∞, –¥–∞–π –∫—Ä–∞—Ç–∫–∏–π –∏ —è—Å–Ω—ã–π –æ—Ç–≤–µ—Ç (–Ω–µ –±–æ–ª–µ–µ 3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π).\n"
                + "2. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–ª–∏–Ω—É, —Å–æ–±–ª—é–¥–∞–π —ç—Ç–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ.\n"
                + "3. –ù–ï –§–æ—Ä–º–∞—Ç–∏—Ä—É–π –æ—Ç–≤–µ—Ç –ø–æ–¥ –∫–∞–∫–æ–π-–ª–∏–±–æ —Å—Ç–∏–ª—å: –æ—Ç–≤–µ—á–∞–π –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –æ–±—ã—á–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.",
            }
        ]

        for msg in chat_history:
            role = "user" if msg["is_user_message"] else "assistant"
            messages.append({"role": role, "content": msg["message"]})

        messages.append({"role": "user", "content": user_input})

        if not user_model.find("gemini-1.5"):
            headers = {
                "Authorization": f"Bearer {gemini_api_key}",
                "Content-Type": "application/json",
            }
            data = {"model": user_model, "messages": messages}
            try:
                response = requests.post(
                    "https://my-openai-gemini-demo.vercel.app/v1/chat/completions",
                    timeout=15,
                    headers=headers,
                    data=json.dumps(data),
                )
            except requests.exceptions.Timeout:
                print("Timed out")
            else:
                if response.status_code == 200:
                    result = response.json()["choices"][0]["message"]["content"].strip()
        else:
            response = await client.chat.completions.create(
                model=user_model,
                provider=g4f.Provider.Blackbox,
                messages=messages,
            )
            result = response.choices[0].message.content
        end_time = time.time()
        decrease_usage(user_model)
        return (
            format_text(
                user_model,
                type_request,
                result,
                end_time - start_time,
                tokens_used,
                limit_of_user_model
            ),
            result,
        )
    except Exception as e:
        return f"–ü—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!\n```\n{str(e)}\n```", ""
    
async def process_text_inline_mode(user_input: str, user_id: int) -> str:
    try:
        start_time = time.time()
        client = AsyncClient()

        user_model = "gemini-1.5-flash"
        limit_of_user_model = limit_context_of_model(user_model)

        chat_history, tokens_used = get_chat_history(user_id, limit_of_user_model)
        messages = [
            {
                "role": "system",
                "content": "–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—â–∏–π –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏ –æ—á–µ–Ω—å –∫—Ä–∞—Ç–∫–∏–µ –æ—Ç–≤–µ—Ç—ã.\n"
                + "1. –û—Ç–≤–µ—á–∞–π –æ—á–µ–Ω—å-–æ—á–µ–Ω—å –∫—Ä–∞—Ç–∫–æ.\n"
                + "2. –ï—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∫—Ä–∞—â–∞–π –æ—Ç–≤–µ—Ç –ø–æ–¥ 1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.\n"
                + "3. –ù–ï –§–æ—Ä–º–∞—Ç–∏—Ä—É–π –æ—Ç–≤–µ—Ç –ø–æ–¥ –∫–∞–∫–æ–π-–ª–∏–±–æ —Å—Ç–∏–ª—å: –æ—Ç–≤–µ—á–∞–π –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –æ–±—ã—á–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.",
            }
        ]

        for msg in chat_history:
            role = "user" if msg["is_user_message"] else "assistant"
            messages.append({"role": role, "content": msg["message"]})

        messages.append({"role": "user", "content": user_input})

        if not user_model.find("gemini-1.5"):
            headers = {
                "Authorization": f"Bearer {gemini_api_key}",
                "Content-Type": "application/json",
            }
            data = {"model": user_model, "messages": messages}
            try:
                response = requests.post(
                    "https://my-openai-gemini-demo.vercel.app/v1/chat/completions",
                    timeout=15,
                    headers=headers,
                    data=json.dumps(data),
                )
            except requests.exceptions.Timeout:
                print("Timed out")
            else:
                if response.status_code == 200:
                    result = response.json()["choices"][0]["message"]["content"].strip()
        else:
            response = await client.chat.completions.create(
                model=user_model,
                provider=g4f.Provider.Blackbox,
                messages=messages,
            )
            result = response.choices[0].message.content
        end_time = time.time()
        decrease_usage(user_model)
        return result
    except Exception as e:
        return f"–ü—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!\n```\n{str(e)}\n```", ""

async def handle_img_gen(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id

    active_requests[user_id] = "img"

    user_input = update.message.text

    processing_message = await update.message.reply_text(
        "_–í–∞—à –∑–∞–ø—Ä–æ—Å (/img) –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è..._", parse_mode="Markdown"
    )

    await context.bot.send_chat_action(chat_id=chat_id, action=ChatAction.TYPING)

    response_text, image_url = await process_image_with_flux(user_input)
    image_data = base64.b64decode(image_url)

    with open("generated_image.png", "wb") as image_file:
        image_file.write(image_data)

    await context.bot.delete_message(
        chat_id=chat_id, message_id=processing_message.message_id
    )

    if response_text and response_text.find("–ü—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!"):
        if not image_url == 'error':
            await update.message.reply_text(
                response_text, parse_mode="Markdown"
            )
            await update.message.reply_photo(open("generated_image.png", 'rb'))
        else:
            await update.message.reply_text(response_text, parse_mode="Markdown")
    else:
        await update.message.reply_text(response_text, parse_mode="Markdown")

    del active_requests[user_id]

async def process_image_with_flux(promt_image: str) -> str:
    try:
        client = AsyncClient()

        # –≠—Ç–∞–ø 1: –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        start_time = time.time()
        
        response = await client.images.generate(
            prompt=promt_image,
            model="flux-4o",
            response_format="b64_json"
        )

        end_time = time.time()

        return format_image(
            "flux",
            end_time - start_time,
        ), response.data[0].b64_json

    except Exception as e:
        return "–ü—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!\n```\n" + str(e) + "\n```", 'error'

async def end_chat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = update.effective_user.id
    try:
        delete_messages(user_id)
        if user_id in active_requests:
            del active_requests[user_id]

        await query.message.reply_text(
            "–ß–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω. –ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞. –î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start"
        )
    except Exception as e:
        await query.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏.")
        await query.message.reply_text(e)


async def models(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    await choose_model_handler(update, context)


async def menu(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    await start(update, context)


async def tools(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    text = (
        "*üõ† | –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã Service Assistant* - —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–µ–∂–∏–º—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞/–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –¥–∞—é—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å"
        " –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ª–µ–≥–∫–æ –∏ –ø—Ä–æ—Å—Ç–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å —Å–ª–æ–∂–Ω—É—é —Ä–∞–±–æ—Ç—É —Å –Ω–µ–π—Ä–æ—Å–µ—Ç—è–º–∏.\n\n"
        "*üìú | –¢–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ (–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–æ–º–∞–Ω–¥—É):*\n"
        "*/exam* - –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ —à–∫–æ–ª—å–Ω—ã–π —Ç–µ—Å—Ç –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ "
        "–∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –Ω–∞ –æ–±—â–µ—Å—Ç–≤–æ–≤–µ–¥—á–µ—Å–∫–∏—Ö –ø—Ä–µ–¥–º–µ—Ç–∞—Ö (–ò—Å—Ç–æ—Ä–∏—è, –±–∏–æ–ª–æ–≥–∏—è, –æ–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ, –û–ë–ñ –∏ –ø—Ä–æ—á–∏–µ)\n"
        "*/img* - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –≤–∞–º–∏ –ø—Ä–æ–º—Ç–∞"
    )

    reply_markup = InlineKeyboardMarkup(
        [[InlineKeyboardButton("üîª | –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data=f"menu")]]
    )

    await query.edit_message_text(
        text, reply_markup=reply_markup, parse_mode="Markdown"
    )


async def handle_mixed(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º"""
    user_id = update.effective_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–ø—Ä–æ—Å
    if user_id in active_requests:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–æ–∫–∞ —è –æ–±—Ä–∞–±–æ—Ç–∞—é –≤–∞—à –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∑–∞–ø—Ä–æ—Å (handle_mixed)."
        )
        return

    active_requests[user_id] = "image"

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∏ —Ñ–æ—Ç–æ
    user_input = update.message.caption or ""
    photo_file = await update.message.photo[-1].get_file()
    image_url = photo_file.file_path

    user_input_model = "Text+" if user_input else ""

    processing_message = await update.message.reply_text(
        "_–í–∞—à –∑–∞–ø—Ä–æ—Å (" + user_input_model + "Image) –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è..._",
        parse_mode="Markdown",
    )

    await context.bot.send_chat_action(
        chat_id=update.effective_chat.id, action=ChatAction.TYPING
    )

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ –Ω–µ–π—Ä–æ—Å–µ—Ç—å
    response_text = await process_image_and_text(image_url, user_input)

    await context.bot.delete_message(
        chat_id=update.effective_chat.id, message_id=processing_message.message_id
    )

    if response_text:
        await update.message.reply_text(response_text, parse_mode="Markdown")
    else:
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")

    del active_requests[user_id]


async def process_image_and_text(image_url: str, text: str) -> str:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ –Ω–µ–π—Ä–æ—Å–µ—Ç—å"""
    type_request_text = " —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º –∑–∞–ø—Ä–æ—Å–æ–º" if text else ""
    type_request = "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ" + type_request_text
    try:
        start_time = time.time()
        client = AsyncClient()
        image = requests.get(image_url, stream=True).raw
        # –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        response_1 = await client.chat.completions.create(
            model=g4f.models.default,
            provider=g4f.Provider.Blackbox,
            messages=[
                {
                    "role": "system",
                    "content": "–¢—ã ‚Äî —É–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π. –¢–≤–æ—è –∑–∞–¥–∞—á–∞:\n"
                    + "1. –ï—Å–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, —Å–Ω–∞—á–∞–ª–∞ –ø–æ–¥—Ä–æ–±–Ω–æ –µ–≥–æ –æ–ø–∏—à–∏. –£–∫–∞–∂–∏ —Ü–≤–µ—Ç–∞, —Ñ–æ—Ä–º—ã, —Ç–µ–∫—Å—Ç—É—Ä—ã, —á—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–æ, –∏ –ª—é–±—ã–µ –¥—Ä—É–≥–∏–µ –¥–µ—Ç–∞–ª–∏.\n"
                    + "2. –ï—Å–ª–∏ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –±—ã–ª –ø–µ—Ä–µ–¥–∞–Ω –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–æ—Å—å–±–∞, –æ–±—Ä–∞–±–æ—Ç–∞–π –µ–≥–æ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –¥–∞–π –ø–æ–Ω—è—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç. –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å–∞ –∏–ª–∏ –ø—Ä–æ—Å—å–±—ã –Ω–µ—Ç, –ø—Ä–æ—Å—Ç–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å –æ–ø–∏—Å–∞–Ω–∏–µ.\n"
                    + "3. –ù–ï –§–æ—Ä–º–∞—Ç–∏—Ä—É–π –æ—Ç–≤–µ—Ç –ø–æ–¥ –∫–∞–∫–æ–π-–ª–∏–±–æ —Å—Ç–∏–ª—å: –æ—Ç–≤–µ—á–∞–π –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –æ–±—ã—á–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.\n",
                },
                {
                    "role": "user",
                    "content": text if text else "–û–ø–∏—à–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ —Ç–µ–∫—Å—Ç —Å –Ω–µ–≥–æ",
                },
            ],
            image=image,
        )

        response_2 = await client.chat.completions.create(
            model=g4f.models.default,
            provider=g4f.Provider.Blackbox,
            messages=[
                {
                    "role": "system",
                    "content": "–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫, –≤—ã–ø–æ–ª–Ω—è—é—â–∏–π –ø–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ —Å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –Ω–∞ —Ä—É—Å—Å–∫–∏–π.\n"
                    + "1. –£–±–µ—Ä–∏ –ª—é–±–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, –≤–∫–ª—é—á–∞—è —Å–∏–º–≤–æ–ª—ã —Ä–∞–∑–º–µ—Ç–∫–∏, —Ç–∞–∫–∏–µ –∫–∞–∫ **–∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç**, *–∫—É—Ä—Å–∏–≤*, –∑–∞–≥–æ–ª–æ–≤–∫–∏, —Å–ø–∏—Å–∫–∏ –∏ –¥—Ä—É–≥–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã.\n"
                    + "2. –¢–≤–æ–π –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–æ—Å—Ç—ã–º —Ç–µ–∫—Å—Ç–æ–º –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –±–µ–∑ –∫–∞–∫–∏—Ö-–ª–∏–±–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏—è.\n"
                    + "3. –°–æ—Ö—Ä–∞–Ω—è–π —Å–º—ã—Å–ª –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.",
                },
                {
                    "role": "user",
                    "content": "–ü–µ—Ä–µ–≤–µ–¥–∏ –æ—Ç–≤–µ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫ –∏ —É–¥–∞–ª–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑ –æ—Ç–≤–µ—Ç–∞:\n"
                    + response_1.choices[0].message.content,
                },
            ],
        )
        end_time = time.time()
        return format_text(
            "gemini-pro | gpt-4o",
            type_request,
            response_2.choices[0].message.content,
            end_time - start_time,
        )

    except Exception as e:
        return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}"


async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
    user_id = update.effective_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–ø—Ä–æ—Å
    if not user_id in active_requests:
        await handle_mixed(update, context)
        # await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /exam.")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    photo_file = await update.message.photo[-1].get_file()
    image_url = photo_file.file_path

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    processing_message = await update.message.reply_text(
        "_–í–∞—à –∑–∞–ø—Ä–æ—Å (/exam) –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è..._", parse_mode="Markdown"
    )

    await context.bot.send_chat_action(
        chat_id=update.effective_chat.id, action=ChatAction.TYPING
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ GPT-4o
    response_text = await process_exams_with_gpt4o(image_url)

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–í–æ–ø—Ä–æ—Å—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è..."
    await context.bot.delete_message(
        chat_id=update.effective_chat.id, message_id=processing_message.message_id
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
    if response_text:
        await update.message.reply_text(response_text, parse_mode="Markdown")
    else:
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")

    # –ó–∞–≤–µ—Ä—à–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–ø—Ä–æ—Å
    del active_requests[user_id]

async def process_exams_with_gpt4o(image_url: str) -> str:
    type_request = "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º –∑–∞–ø—Ä–æ—Å–æ–º (/exam)"
    try:
        client = AsyncClient()

        time_tracker = {}

        # –≠—Ç–∞–ø 1: –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        start_time = time.time()
        image = requests.get(image_url, stream=True).raw
        end_time = time.time()
        time_tracker["–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"] = end_time - start_time

        # –≠—Ç–∞–ø 2: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        start_time = time.time()
        response_1 = await client.chat.completions.create(
            model=g4f.models.default,
            provider=g4f.Provider.Blackbox,
            messages=[
                {
                    "role": "user",
                    "content": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, —Å–æ–¥–µ—Ä–∂–∞—â–µ–µ —Ç–µ–∫—Å—Ç —à–∫–æ–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞. –ò–∑–≤–ª–µ–∫–∏ –≤–µ—Å—å —Ç–µ–∫—Å—Ç —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å –µ–≥–æ –≤ –≤–∏–¥–µ —Ç–µ–∫—Å—Ç–∞. –ù–µ –≥–æ–≤–æ—Ä–∏ –Ω–∏—á–µ–≥–æ, –ø—Ä–æ—Å—Ç–æ –≤—ã–ø–∏—à–∏ —Ç–µ–∫—Å—Ç —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–µ—Å—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Å—å, —á—Ç–æ —Ç–µ–∫—Å—Ç –∏–∑–≤–ª–µ—á—ë–Ω –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ç–æ—á–Ω–æ.",
                }
            ],
            image=image,
        )
        end_time = time.time()
        time_tracker["–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"] = end_time - start_time

        # –≠—Ç–∞–ø 3: –ê–Ω–∞–ª–∏–∑ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
        start_time = time.time()
        response_2 = await client.chat.completions.create(
            model="gpt-4o",
            provider=g4f.Provider.Blackbox,
            messages=[
                {
                    "role": "system",
                    "content": "–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –≤ –∞–Ω–∞–ª–∏–∑–µ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–µ–∫—Å—Ç–æ–≤.",
                },
                {
                    "role": "user",
                    "content": "–í–æ—Ç —Ç–µ–∫—Å—Ç —Ç–µ—Å—Ç–∞:"
                    + response_1.choices[0].message.content
                    + "."
                    "–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π –µ–≥–æ, —Å–¥–µ–ª–∞–π –±–æ–ª–µ–µ —á–∏—Ç–∞–±–µ–ª—å–Ω—ã–º, —É–∫–∞–∂–∏ –ø—Ä–µ–¥–º–µ—Ç, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –æ—Ç–Ω–æ—Å–∏—Ç—Å—è —Ç–µ—Å—Ç, "
                    "–∏ –≤–µ—Ä–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Ç–µ–∫—Å—Ç–∞.",
                },
            ],
        )
        end_time = time.time()
        time_tracker["–ê–Ω–∞–ª–∏–∑ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞"] = end_time - start_time

        question = response_2.choices[0].message.content

        # –≠—Ç–∞–ø 4: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ —Ä–µ—à–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤
        start_time = time.time()
        response_3 = await client.chat.completions.create(
            model="gpt-4o",
            provider=g4f.Provider.Blackbox,
            messages=[
                {
                    "role": "system",
                    "content": "–¢—ã –≤—ã—Å–æ–∫–æ–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —É—á–∏—Ç–µ–ª—å –≤ —à–∫–æ–ª–µ, —Å—Ç–∞–∂ —Ç–≤–æ–µ–π —Ä–∞–±–æ—Ç—ã 80 –ª–µ—Ç.",
                },
                {
                    "role": "user",
                    "content": "–Ø —Ç–µ–±–µ –æ—Ç–ø—Ä–∞–≤–ª—é —Ç–µ–∫—Å—Ç —à–∫–æ–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞, —Ç–≤–æ—è –∑–∞–¥–∞—á–∞ —Ä–µ—à–∏—Ç—å –µ–≥–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ.\n"
                    + "–¢–µ–±–µ –Ω—É–∂–Ω–æ —Ä–µ—à–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å–ª–µ–¥—É—é—â–∏–µ –∑–∞–¥–∞–Ω–∏—è –∏–∑ —Ç–µ—Å—Ç–∞:\n"
                    + question
                    + "\n–í —Å–≤–æ—ë–º –æ—Ç–≤–µ—Ç–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∏–ª–∏ –∫—Ä–∞—Ç–∫–∏–π –æ—Ç–≤–µ—Ç –Ω–∞ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å."
                    + '–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å –æ—Ç–≤–µ—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "1) –í–æ–ø—Ä–æ—Å\n- –û—Ç–≤–µ—Ç\n2)–í–æ–ø—Ä–æ—Å\n- –û—Ç–≤–µ—Ç\n'
                    + "–¢–∞–∫–∂–µ —É–±–µ—Ä–∏ –ª—é–±–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞, —Ç–∏–ø–æ ### ** ** –∏–ª–∏ –ª—é–±–æ–µ –¥—Ä—É–≥–æ–µ.",
                },
            ],
        )
        end_time = time.time()
        time_tracker["–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ —Ä–µ—à–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤"] = end_time - start_time

        all_time_tracker = (
            time_tracker["–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"]
            + time_tracker["–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"]
            + time_tracker["–ê–Ω–∞–ª–∏–∑ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞"]
            + time_tracker["–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ —Ä–µ—à–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤"]
        )

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        return format_text(
            "gemini-pro | gpt-4o",
            type_request,
            response_3.choices[0].message.content,
            all_time_tracker,
        )

    except Exception as e:
        return "–ü—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!\n```\n" + str(e) + "\n```"


def ensure_user_exists(user_id):
    conn = get_db_connection()
    cursor = conn.cursor()

    # Check if user exists
    cursor.execute("SELECT 1 FROM users WHERE user_id = %s", (user_id,))
    if not cursor.fetchone():
        # User doesn't exist, create a new user
        cursor.execute(
            "INSERT INTO users (user_id, model_text, model_vision, model_image) VALUES (%s, %s, %s, %s)",
            (user_id, "gpt-4o", "gemini-pro", "flux"),
        )
        conn.commit()

    cursor.close()
    conn.close()


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    application = ApplicationBuilder().token(TOKEN).concurrent_updates(True).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("menu", start))
    application.add_handler(CommandHandler("exam", exam))
    application.add_handler(CommandHandler("img", img))
    application.add_handler(CommandHandler("cancel", cancel))

    application.add_handler(CallbackQueryHandler(end_chat, pattern="end_chat"))
    application.add_handler(CallbackQueryHandler(set_model, pattern="^model_"))
    application.add_handler(CallbackQueryHandler(models, pattern="models"))
    application.add_handler(CallbackQueryHandler(tools, pattern="tools"))
    application.add_handler(CallbackQueryHandler(menu, pattern="menu"))

    application.add_handler(
        MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text)
    )

    application.add_handler(
        MessageHandler(filters.PHOTO & filters.CAPTION, handle_mixed)
    )

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
    application.add_handler(
        MessageHandler(filters.PHOTO & ~filters.COMMAND, handle_photo)
    )

    application.add_handler(InlineQueryHandler(handle_inline_query))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()


if __name__ == "__main__":
    main()
